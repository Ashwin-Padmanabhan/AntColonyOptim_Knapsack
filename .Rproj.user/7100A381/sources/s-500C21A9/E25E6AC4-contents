# Section One ---------------------------------
#install.packages("https://cran.r-project.org/src/contrib/Archive/rgp/rgp_0.4-1.tar.gz", repos= NULL, method = "libcurl")

#--------
#define library
library("rgp")

#define function set, input variables, and constant factory function. 
functionSet1 = functionSet("+", "*", "-")
inputVariableSet1 = inputVariableSet("x")
constantFactorySet1 = constantFactorySet(function() rnorm(1))

# IMPORTING THE DATASET
dataset = read.csv("data1.csv", header=T,
                   colClasses = c("numeric", "numeric"))

# Linear Model --------------------------------------------------------------------
linearmodel = lm(y~x, data=dataset)
summary(linearmodel)
RSS <- c(crossprod(linearmodel$residuals))
MSE <- RSS / length(linearmodel$residuals)
RMSE <- sqrt(MSE)

# Symbolic Regression -----------------------------------------------------

#implementing the symbolic regression
#set.seed(123) working seed
set.seed(1241412)
symmodel  = symbolicRegression(y ~ x,
                               data = dataset,functionSet = functionSet1, constantSet = constantFactorySet1
                               )
bestModel1 = symmodel$population[[which.min(
                    symmodel$fitnessValues)]]
#FOR PLOTTING
dfres = data.frame(dataset[1], bestModel1(dataset[1]))
dfdata = data.frame(dataset[1], dataset[2])

plot(dfres, main="Symbolic Model Plot", ylab="y",)
points(dfdata, col="red")
legend("topleft",
       c("Symbolic","Actual data"),
       fill=c("black","red")
)
a = symmodel$bestFitness
print(a)
print(bestModel1)

# Symbollic Regression Partition ------------------------------------------

set.seed(12131)
smp_size <- floor(0.75 * nrow(dataset))
train_ind <- sample(seq_len(nrow(dataset)), size = smp_size)

train <- dataset[train_ind, ]
test <- dataset[-train_ind, ]

symmodel2  = symbolicRegression(y ~ x,
                               data = train,functionSet = functionSet1, constantSet = constantFactorySet1
                              )
bestModel2 = symmodel2$population[[which.min(symmodel2$fitnessValues)]]

#FOR PLOTTING

dfres2 = data.frame(test[1], bestModel2(test[1]))
dfdata2 = data.frame(test[1], test[2])

plot(dfres2, main="Symbolic Model Plot with Partition", ylab="y",)
points(dfdata2, col="red")
legend("topleft",
       c("Symbolic","Actual data"),
       fill=c("black","red")
)
a = symmodel2$bestFitness
print(a)
print(bestModel2)

set.seed(12211131)
smp_size3 <- floor(0.75 * nrow(dataset))
train_ind3 <- sample(seq_len(nrow(dataset)), size = smp_size3)

train3 <- dataset[train_ind3, ]
test3 <- dataset[-train_ind3, ]

symmodel3  = symbolicRegression(y ~ x,
                                data = train3)
bestModel3 = symmodel3$population[[which.min(symmodel3$fitnessValues)]]

#FOR PLOTTING

dfres3 = data.frame(test3[1], bestModel3(test3[1]))
dfdata3 = data.frame(test3[1], test3[2])

plot(dfres3, main="Symbolic Model Plot with Partition all function set", ylab="y",)
points(dfdata3, col="red")
legend("topleft",
       c("Symbolic","Actual data"),
       fill=c("black","red")
)
a3 = symmodel3$bestFitness
print(a3)
print(bestModel3)
