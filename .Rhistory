for(i in 1:(n-l+1))
{
j=i+l-1;
m[i,j]= Inf;
for(k in i:(j-1))
{
q= m[i,k] + m[k+1,j] + d[i-1]*d[k]*d[j];
print(paste0("i,j,k,l", i,j,k,l))
if(q<m[i,j])
{
m[i,j]=q;
s[i,j] = k;
}
}
}
}
rett=list("sequ"=s, "mult"=m)
}
ash=mat_chain(d,1,3)
mat_chain<-function(d,i,j)
{
if (m[i,j] < Inf )
{
return(m[i,j])
}
if(i==j)
{
return(0)
}
h=Inf;
for(k in i:(j-1))
{
q = mat_chain(d,i,k) + mat_chain(d,k+1,j) + d[i]*d[k+1]*d[j+1]
print("rant")
if(q < h)
{
h=q
s[i,j]=k
}
}
m[i,j]<<-h
return(m)
}
ash=mat_chain(d,1,3)
ash
mat_chain<-function(d,i,j)
{
if (m[i,j] < Inf )
{
return(m[i,j])
}
if(i==j)
{
return(0)
}
h=Inf;
for(k in i:(j-1))
{
q = mat_chain(d,i,k) + mat_chain(d,k+1,j) + d[i]*d[k+1]*d[j+1]
if(q < h)
{
h=q
s[i,j]=k
}
}
m[i,j]<<-h
return(h)
}
ash=mat_chain(d,1,3)
ash
mat_chain<-function(d,i,j)
{
if (m[i,j] < Inf )
{
return(m[i,j])
}
if(i==j)
{
return(0)
}
h=Inf;
for(k in i:(j-1))
{
q = mat_chain(d,i,k) + mat_chain(d,k+1,j) + d[i]*d[k+1]*d[j+1]
if(q < h)
{
h=q
s[i,j]<<-k
}
}
m[i,j]<<-h
return(h)
}
s
ash=mat_chain(d,1,4)
ash
s
s=matrix(NA,n,n)
ash=mat_chain(d,1,4)
s
s
mat_chain<-function(d,i,j)
{
if (m[i,j] < Inf )
{
return(m[i,j])
}
if(i==j)
{
return(0)
}
h=Inf;
for(k in i:(j-1))
{
q = mat_chain(d,i,k) + mat_chain(d,k+1,j) + d[i]*d[k+1]*d[j+1]
if(q < h)
{
h=q
print(k)
s[i,j]<<-k
}
}
m[i,j]<<-h
return(h)
}
ash=mat_chain(d,1,4)
s
remove(mat_chain)
mat_chain<-function(d,i,j)
{
if (m[i,j] < Inf )
{
return(m[i,j])
}
if(i==j)
{
return(0)
}
h=Inf;
for(k in i:(j-1))
{
q = mat_chain(d,i,k) + mat_chain(d,k+1,j) + d[i]*d[k+1]*d[j+1]
if(q < h)
{
h=q
print(k)
s[i,j]<<-k
}
}
m[i,j]<<-h
return(h)
}
ash=mat_chain(d,1,4)
s
ash
print(l)
remove(h)
d
save.image("~/Desktop/Fall/IE545/dp_dataset.RData")
d=c(5,4,6,2,7)
i=1;
n=4;
d=c(5,4,6,2,7)
mat_chain<-function(d,i,j)
{
if (m[i,j] < Inf )
{
return(m[i,j])
}
if(i==j)
{
return(0)
}
h=Inf;
for(k in i:(j-1))
{
q = mat_chain(d,i,k) + mat_chain(d,k+1,j) + d[i]*d[k+1]*d[j+1]
if(q < h)
{
h=q
print(k)
s[i,j]<<-k
}
}
m[i,j]<<-h
return(h)
}
d=c(5,4,6,2,7)
i=1;
n=4;
s<-matrix(NA, n,n)
mat_chain<-function(d,i,j)
{
if (m[i,j] < Inf )
{
return(m[i,j])
}
if(i==j)
{
return(0)
}
h=Inf;
for(k in i:(j-1))
{
q = mat_chain(d,i,k) + mat_chain(d,k+1,j) + d[i]*d[k+1]*d[j+1]
if(q < h)
{
h=q
print(k)
s[i,j]<<-k
}
}
m[i,j]<<-h
return(h)
}
ash=mat_chain(d,1,4)
d=c(5,4,6,2,7)
i=1;
n=4;
s<-matrix(NA, n,n)
m<-matrix(Inf, n, n)
mat_chain<-function(d,i,j)
{
if (m[i,j] < Inf )
{
return(m[i,j])
}
if(i==j)
{
return(0)
}
h=Inf;
for(k in i:(j-1))
{
q = mat_chain(d,i,k) + mat_chain(d,k+1,j) + d[i]*d[k+1]*d[j+1]
if(q < h)
{
h=q
print(k)
s[i,j]<<-k
}
}
m[i,j]<<-h
return(h)
}
ash=mat_chain(d,1,4)
s
d=c(5,4,6,2,7)                  #random dimensions.
i=1;                            #These are sample values that I take.
n=4;                            #You may choose to change them. Apologies for the hard-coding.
s<-matrix(NA, n,n)
m<-matrix(Inf, n, n)
ash=mat_chain(d,1,4)
print(ash)
d=c(5,4,6,2,7)                  #random dimensions.
i=1;                            #These are sample values that I take.
n=4;                            #You may choose to change them. Apologies for the hard-coding.
s<-matrix(NA, n,n)
m<-matrix(Inf, n, n)
ash=mat_chain(d,1,4)
print(ash)
d=c(5,4,6,2,7)                  #random dimensions.
i=1;                            #These are sample values that I take.
n=4;                            #You may choose to change them. Apologies for the hard-coding.
s<-matrix(NA, n,n)
m<-matrix(Inf, n, n)
ash=mat_chain(d,1,4)
print(ash)
d=c(5,4,6,2,7)
i=1;
n=4;
s<-matrix(NA, n,n)
m<-matrix(Inf, n, n)
mat_chain<-function(d,i,j)
{
if (m[i,j] < Inf )
{
return(m[i,j])
}
if(i==j)
{
return(0)
}
h=Inf;
for(k in i:(j-1))
{
q = mat_chain(d,i,k) + mat_chain(d,k+1,j) + d[i]*d[k+1]*d[j+1]
if(q < h)
{
h=q
s[i,j]<<-k
}
}
m[i,j]<<-h
return(h)
}
d=c(5,4,6,2,7)
i=1;
n=4;
s<-matrix(NA, n,n)
m<-matrix(Inf, n, n)
mat_chain<-function(d,i,j)
{
if (m[i,j] < Inf )
{
return(m[i,j])
}
if(i==j)
{
return(0)
}
h=Inf;
for(k in i:(j-1))
{
q = mat_chain(d,i,k) + mat_chain(d,k+1,j) + d[i]*d[k+1]*d[j+1]
if(q < h)
{
h=q
s[i,j]<<-k
}
}
m[i,j]<<-h
return(h)
}
mat_chain<-function(d,i,j)
{
if (m[i,j] < Inf )
{
return(m[i,j])
}
if(i==j)
{
return(0)
}
h=Inf;
for(k in i:(j-1))
{
q = mat_chain(d,i,k) + mat_chain(d,k+1,j) + d[i]*d[k+1]*d[j+1]
if(q < h)
{
h=q
print(k)
s[i,j]<<-k
}
}
m[i,j]<<-h
return(h)
}
d=c(5,4,6,2,7)                  #random dimensions.
i=1;                            #These are sample values that I take.
n=4;                            #You may choose to change them. Apologies for the hard-coding.
s<-matrix(NA, n,n)
m<-matrix(Inf, n, n)
ash=mat_chain(d,1,4)
print(ash)
mat_chain<-function(d,i,j)
{
if (m[i,j] < Inf )
{
return(m[i,j])
}
if(i==j)
{
return(0)
}
h=Inf;
for(k in i:(j-1))
{
q = mat_chain(d,i,k) + mat_chain(d,k+1,j) + d[i]*d[k+1]*d[j+1]
if(q < h)
{
h=q
print(k)
s[i,j]<<-k
}
}
m[i,j]<<-h
return(h)
d=c(5,4,6,2,7)                  #random dimensions.
i=1;                            #These are sample values that I take.
n=4;                            #You may choose to change them. Apologies for the hard-coding.
s<-matrix(NA, n,n)
m<-matrix(Inf, n, n)
ash=mat_chain(d,1,4)
print(ash)
d=c(5,4,6,2,7)                  #random dimensions.
i=1;                            #These are sample values that I take.
n=4;                            #You may choose to change them.
s<-matrix(NA, n,n)
m<-matrix(Inf, n, n)
ash=mat_chain(d,1,4)
print(ash)
d=c(5,4,6,2,7)                  #random dimensions.
i=1;                            #These are sample values that I take.
n=4;                            #You may choose to change them.
s<-matrix(NA, n,n)
m<-matrix(Inf, n, n)
ash=mat_chain(d,1,4)
print(ash)
mat_chain<-function(d,i,j)
{
if (m[i,j] < Inf )
{
return(m[i,j])
}
if(i==j)
{
return(0)
}
h=Inf;
for(k in i:(j-1))
{
q = mat_chain(d,i,k) + mat_chain(d,k+1,j) + d[i]*d[k+1]*d[j+1]
if(q < h)
{
h=q
print(k)
s[i,j]<<-k
}
}
m[i,j]<<-h
return(h)
d=c(5,4,6,2,7)                  #random dimensions.
i=1;                            #These are sample values that I take.
n=4;                            #You may choose to change them.
s<-matrix(NA, n,n)
m<-matrix(Inf, n, n)
ash=mat_chain(d,1,4)
print(ash)
d=c(5,4,6,2,7)                  #random dimensions.
i=1;                            #These are sample values that I take.
n=4;                            #You may choose to change them.
s<-matrix(NA, n,n)
m<-matrix(Inf, n, n)
ash=mat_chain(d,1,4)
print(ash)
d=c(5,4,6,2,7)                  #random dimensions.
i=1;                            #These are sample values that I take.
n=4;                            #You may choose to change them.
s<-matrix(NA, n,n)
m<-matrix(Inf, n, n)
ash=mat_chain(d,1,4)
print(ash)
mat_chain<-function(d,i,j)
{
if (m[i,j] < Inf )
{
return(m[i,j])
}
if(i==j)
{
return(0)
}
h=Inf;
for(k in i:(j-1))
{
q = mat_chain(d,i,k) + mat_chain(d,k+1,j) + d[i]*d[k+1]*d[j+1]
if(q < h)
{
h=q
s[i,j]<<-k
}
}
m[i,j]<<-h
return(h)
}
mat_chain<-function(d,i,j)
{
if (m[i,j] < Inf )
{
return(m[i,j])
}
if(i==j)
{
return(0)
}
h=Inf;
for(k in i:(j-1))
{
q = mat_chain(d,i,k) + mat_chain(d,k+1,j) + d[i]*d[k+1]*d[j+1]
if(q < h)
{
h=q
s[i,j]<<-k
}
}
m[i,j]<<-h
return(h)
}
print(s)
d=c(5,4,6,2,7,1,4)                  #random dimensions.
i=1;                            #These are sample values that I take.
n=6;                            #You may choose to change them.
s<-matrix(NA, n,n)
m<-matrix(Inf, n, n)
ash1=mat_chain(d,1,4)
print(ash1)
d=c(5,4,6,2,7,1,4)                  #random dimensions.
i=1;                            #These are sample values that I take.
n=6;                            #You may choose to change them.
s<-matrix(NA, n,n)
m<-matrix(Inf, n, n)
ash1=mat_chain(d,1,4)
print(ash1)
d=c(5,4,6,2,7,1,4)                  #random dimensions.
i=1;                            #These are sample values that I take.
n=6;                            #You may choose to change them.
s<-matrix(NA, n,n)
m<-matrix(Inf, n, n)
ash1=mat_chain(d,1,6)
print(ash1)
print(s)
